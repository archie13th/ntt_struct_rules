# This file contains the T3XF instructions used by K3 runtime and MTC compiler.
# It contains the opcode, stack operations, execution context and a
# description, if available.
#
# When you update this file please run `go generate` to update the implemtation.
# It recommended to also run `go test ./...` from inside the t3xf directory.

action:
  opcode: 256
  operations:
  - pre: [str]
  context:
  - BehavEnv
  description: |+
    Request the action described in str from the user.

activate:
  opcode: 208
  operations:
  - pre: [blk]
    post: [default]
  context:
  - BehavEnv
  description: |+
    Activate an altstep and return a default object. Block blk
    shall contain an altstep call, including any required
    parameters.

add:
  opcode: 65
  operations:
  - pre: [a, b]
    post: [res]
  context:
  - Block
  description: |+
    Evaluate a + b, pushing the result.

address:
  opcode: 234
  operations:
  - post: [obj]
  context:
  - Block
  description: |+
    When a module defines a type named ‘address’ then this
    definition is returned from the address operation.

    When a module fails to define an address type then this
    operation returns a built-in opaque address type object.

    Each defined module has its own unique definition of address.

alive:
  opcode: 272
  operations:
  - pre: [comp]
    post: [res]
  context:
  - BehavEnv
  description: |+
    Test the state of component comp for the alive condition. Push
    the boolean result onto the stack.

alive1:
  opcode: 273
  operations:
  - post: [res]
  context:
  - BehavEnv
  description: |+
    Test the state of all parallel test components for any that
    are alive. Push the boolean result onto the stack.

alivea:
  opcode: 274
  operations:
  - post: [res]
  context:
  - BehavEnv
  description: |+
    Test the state of all parallel test components checking that
    all are alive. Push the boolean result onto the stack.

allfrom:
  opcode: 106
  operations: []
  context:
  - Block
  description: ""

allfromp:
  opcode: 107
  operations: []
  context:
  - Block
  description: ""

alt:
  opcode: 56
  operations:
  - pre: [blk]
  context:
  - ActionEnv
  - BehavEnv
  description: |+
    Evaluate the contents of blk until one of the contained
    alternatives succeeds.

    An empty block is allowed: activated defaults will still be
    included in the operation.

    If the successful alternative executes a repeat statement then
    the whole block execution will be re-evaluated.

altnd:
  opcode: 514
  operations:
  - pre: [blk]
  context:
  - ActionEnv
  - BehaEnv
  description: |
    Same as `alt` with disabled defaults (`@nodefault`)
altstep:
  opcode: 128
  operations:
  - pre: [pblk, bblk, name]
  context:
  - DefineEnv
  description: |+
    Define an altstep object from a block pblk containing its
    parameters, bblk containing its behaviour and a name, and then
    attach it to the module object owning the current block.

altstepb:
  opcode: 129
  operations:
  - pre: [comp, pblk, bblk, name]
  context:
  - DefineEnv
  description: |+
    Define a bound altstep object from a component type comp, a
    block pblk containing its parameters, bblk containing its
    behaviour and a name, then attach it to the module object
    owning the current block.

altstepbw:
  opcode: 131
  operations:
  - pre: [comp, ablk, pblk, bblk, name]
  context:
  - DefineEnv
  description: |+
    Define a bound altstep object from a component type comp, a
    block pblk containing its parameters, bblk containing its
    behaviour and a name, attach the attributes from block ablk,
    and then attach it to the module object owning the current
    block.

altstepw:
  opcode: 130
  operations:
  - pre: [ablk, pblk, bblk, name]
  context:
  - DefineEnv
  description: |+
    Define an altstep object from a block pblk containing its
    parameters, bblk containing its behaviour and a name, attach
    the attributes from block ablk, and then attach it to the
    module object owning the current block.

and:
  opcode: 72
  operations:
  - pre: [boola, boolb]
    post: [res]
  - pre: [bool, blk]
    post: [res]
  - pre: [bina, binb]
    post: [res]
  context:
  - Block
  description: |+
    With a boolean first argument, perform the logical and
    operation and return the boolean result. The second argument
    may be either another boolean or a block. If the first
    argument is false then the second argument shall not be
    evaluated.

    With bitstring, hexstring or octetstring inputs, perform the
    bitwise and operation and return the result. The result type
    will be of the same base type as the inputs.

any:
  opcode: 96
  operations:
  - post: [lit]
  context:
  - Block
  description: |+
    Push a special any-value literal on the stack, corresponding
    to the TTCN-3 ‘?’ literal.

anyn:
  opcode: 97
  operations:
  - post: [lit]
  context:
  - Block
  description: |+
    Push a special any-value-or-none literal on the stack,
    corresponding to the TTCN-3 ‘*’ literal.

apply:
  opcode: 25
  operations: []
  context:
  - ActivateEnv
  - Block
  - Environment
  - ExecuteEnv
  - StartEnv
  description: ""

array:
  opcode: 238
  operations:
  - pre: [type, dim]
    post: [obj]
  context:
  - Block
  description: |+
    Create an array type object from an element type type and a
    dimension dim. Push the resulting type object on the stack.
    The array dimension shall be either a positive integer or a
    range of integers (positive, no infinities.)

assign:
  opcode: 88
  operations:
  - pre: [a, b]
  context:
  - Environment
  - FixupEnv
  description: |+
    Assign the value of b to a.

    The types of a and b must be compatible.

assignd:
  opcode: 89
  operations:
  - pre: [a, b]
    post: [a]
  context:
  - Environment
  - FixupEnv
  description: |+
    Assign the value of b to a. Leave object a on the stack.

    The types of a and b must be compatible.

at_default:
  opcode: 513
  operations: []
  context:
  - Block
  description: ""

bit2hex:
  opcode: 396
  operations:
  - pre: [bit]
    post: [res]
  context:
  - PredefinedFunctionInterpreter
  description: |+
    Convert bitstring bit into a hexstring and push it onto the
    stack.

bit2int:
  opcode: 395
  operations:
  - pre: [bit]
    post: [res]
  context:
  - PredefinedFunctionInterpreter
  description: |+
    Convert bitstring bit into an integer and push it onto the
    stack.

bit2oct:
  opcode: 397
  operations:
  - pre: [bit]
    post: [res]
  context:
  - PredefinedFunctionInterpreter
  description: |+
    Convert bitstring bit into an octetstring and push it onto the
    stack.

bit2str:
  opcode: 398
  operations:
  - pre: [bit]
    post: [res]
  context:
  - PredefinedFunctionInterpreter
  description: |+
    Convert bitstring bit into a charstring and push it onto the
    stack.

bits:
  opcode: 17
  operations:
  - post: [lit]
  context:
  - Block
  description: |+
    Push a bitstring literal onto the stack. This is a
    variable-length instruction with the details of the literal
    bitstring following the instruction itself: first, a length
    field, and then the bytes of the bitstring.

    The length field is encoded with the same byte order as has
    been selected for instructions. The length contains the number
    of bits.

    The string itself is always encoded with the first bit of the
    string at the lowest file offset – the natural ordering for
    strings – and in the most-significant bit of that byte.

    Padding shall be placed at the end of the string bytes to
    restore the correct alignment for following instructions.

bitstring:
  opcode: 224
  operations:
  - post: [obj]
  context:
  - Block
  description: |+
    Push the built-in bitstring type object.

block:
  opcode: 8
  operations:
  - post: [blk]
  description: |+
    Switch from scanning back to execution mode pushing a block
    object onto the stack.

boolean:
  opcode: 225
  operations:
  - post: [obj]
  context:
  - Block
  description: |+
    Push the built-in boolean type object.

break:
  opcode: 60
  operations: []
  description: |+
    Leave the enclosing loop construct.

cat:
  opcode: 86
  operations:
  - pre: [a, b]
    post: [res]
  context:
  - Block
  description: |+
    Concatenates strings a and b and returns the result. Objects a
    and b must both be strings of the same base type.

char2int:
  opcode: 392
  operations:
  - pre: [char]
    post: [res]
  context:
  - PredefinedFunctionInterpreter
  description: |+
    Convert single character string char into an integer and push
    it onto the stack.

char2oct:
  opcode: 393
  operations:
  - pre: [char]
    post: [res]
  context:
  - PredefinedFunctionInterpreter
  description: |+
    Convert charstring char into an octetstring and push it onto
    the stack.

charstring:
  opcode: 226
  operations:
  - post: [obj]
  context:
  - Block
  description: |+
    Push the built-in charstring type object.

charstringu:
  opcode: 227
  operations:
  - post: [obj]
  context:
  - Block
  description: |+
    Push the built-in universal charstring type object.

check:
  opcode: 330
  operations:
  - pre: [mblk, ablk, port]
  context:
  - ConditionEnv
  description: |+
    Create a pure check condition on port port. Block mblk shall
    contain code to perform the matching of input. When the
    condition is true (matched) then the enclosing alt will
    execute block ablk to perform variable assignments.

check1:
  opcode: 331
  operations: []
  context:
  - ConditionEnv
  description: ""

checkstate:
  opcode: 376
  operations: []
  context:
  - Block
  description: ""

checkstateal:
  opcode: 377
  operations: []
  context:
  - Block
  description: ""

checkstatean:
  opcode: 378
  operations: []
  context:
  - Block
  description: ""

clear:
  opcode: 312
  operations:
  - pre: [p]
  context:
  - BehavEnv
  description: |+
    Clear all contents from the input queue of port p.

cleara:
  opcode: 313
  operations: []
  context:
  - BehavEnv
  description: |+
    Clear all contents from the input queues of all ports on the
    current component.

closure:
  opcode: 287
  operations: []
  context:
  - Block
  description: ""

closuretype:
  opcode: 233
  operations: []
  context:
  - Block
  description: ""

collect:
  opcode: 9
  operations:
  - pre: [mark, object1, .., objectn]
    post: [col]
  context:
  - Block
  description: |+
    Build a collection from a marked listed of objects,
    potentially empty. The objects and the mark are removed from
    the stack and replaced with a collection object.

complement:
  opcode: 98
  operations:
  - pre: [vlist]
    post: [res]
  context:
  - Block
  description: |+
    Make a complement template literal from the input value list
    vlist. Push the resulting object on the stack.

component:
  opcode: 242
  operations:
  - pre: [iblk]
    post: [ctype]
  context:
  - Block
  description: |+
    Construct a component type object with initialisation from
    block iblk and push on to the stack.

componentx:
  opcode: 243
  operations:
  - pre: [coll, iblk]
    post: [ctype]
  context:
  - Block
  description: |+
    Construct a component type object with initialisation from
    block iblk, extending components listed in collection coll and
    push on to the stack.

connect:
  opcode: 264
  operations:
  - pre: [p1, p2]
  context:
  - BehavEnv
  description: |+
    Connect ports p1 and p2.

const:
  opcode: 132
  operations:
  - pre: [vblk, type, name]
  context:
  - AltstepEnv
  - BehavEnv
  - DefineEnv
  - FixupEnv
  - InitEnv
  description: |+
    Create a constant data definition from a block vblk containing
    the statements of its value, a type type and a name.

constw:
  opcode: 133
  operations:
  - pre: [ablk, vblk, type, name]
  context:
  - AltstepEnv
  - BehavEnv
  - DefineEnv
  - FixupEnv
  - InitEnv
  description: |+
    Create a constant data definition from a block vblk containing
    the statements of its value, a type type and a name, applying
    attributes from block ablk.

continue:
  opcode: 61
  operations: []
  description: |+
    Repeat the enclosing loop construct.

control:
  opcode: 134
  operations:
  - pre: [blk]
  context:
  - ModuleEnv
  description: |+
    Create a control part definition from a block blk containing
    the statements of its behaviour.

create:
  opcode: 280
  operations:
  - pre: [ctype]
    post: [cinst]
  context:
  - BehavEnv
  description: |+
    Create an instance of a component of type ctype and push the
    result onto the stack.

createa:
  opcode: 281
  operations:
  - pre: [ctype]
    post: [cinst]
  context:
  - BehavEnv
  description: |+
    Create an alive-type instance of a component of type ctype and
    push the result onto the stack.

createan:
  opcode: 283
  operations:
  - pre: [name, ctype]
    post: [cinst]
  context:
  - BehavEnv
  description: |+
    Create a named alive-type instance of a component of type
    ctype and push the result onto the stack. The component
    instance name is taken from the name parameter.

createn:
  opcode: 282
  operations:
  - pre: [name, ctype]
    post: [cinst]
  context:
  - BehavEnv
  description: |+
    Create a named instance of a component of type ctype and push
    the result onto the stack. The component instance name is
    taken from the name parameter.

deactivate:
  opcode: 210
  operations:
  - pre: [default]
  context:
  - BehavEnv
  description: |+
    Deactivate default altstep default.

deactivatea:
  opcode: 211
  operations: []
  context:
  - BehavEnv
  description: |+
    Deactivate all altsteps activated on the current component.

decvalue:
  opcode: 424
  operations:
  - pre: [enc, dec]
    post: [res]
  context:
  - BehavEnv
  - PredefinedFunctionInterpreter
  description: |+
    Decode encoded bitstring enc placing the result in dec and
    returning integer res holding the outcome of the operation: 0
    indicates success, 1 indicates unspecified failure and 2
    indicates insufficient data (retry after adding bits to enc.)

def:
  opcode: 91
  operations: []
  context:
  - Block
  description: ""

default:
  opcode: 236
  operations:
  - post: [obj]
  context:
  - Block
  description: |+
    Push the built-in default type object.

disconnect:
  opcode: 265
  operations:
  - pre: [p1, p2]
  context:
  - BehavEnv
  description: |+
    Break the connection between port p1 and port p2.

disconnecta:
  opcode: 266
  operations:
  - pre: [comp]
  context:
  - BehavEnv
  description: |+
    Break all connections from component comp.

disconnectaa:
  opcode: 267
  operations: []
  context:
  - BehavEnv
  description: |+
    Break all connections on all components.

div:
  opcode: 69
  operations:
  - pre: [a, b]
    post: [res]
  context:
  - Block
  description: |+
    Evaluate a / b, pushing the result on the stack.

    The types of a and b must be compatible. The returned object
    has the base type of the input parameters and is constant.

done:
  opcode: 276
  operations:
  - pre: [comp]
  context:
  - ConditionEnv
  description: |+
    Test the state of component comp for the done condition,
    contributing this to an enclosing alt or interleave statement.

done1:
  opcode: 277
  operations: []
  context:
  - ConditionEnv
  description: |+
    Test the state of all parallel test components for any that
    are done, contributing this to an enclosing alt or interleave
    statement.

donea:
  opcode: 278
  operations: []
  context:
  - ConditionEnv
  description: |+
    Test the state of all parallel test components checking that
    all are done, contributing this to an enclosing alt or
    interleave statement.

dowhile:
  opcode: 54
  operations:
  - pre: [body, cond]
  context:
  - Block
  description: |+
    Implements the TTCN-3 do/while statement using two block
    arguments.

    Block body is executed and then loop condition block cond is
    evaluated. If the condition returns true then the process is
    repeated.

    Execution terminates when the loop condition returns a false
    value.

drop:
  opcode: 10
  operations:
  - pre: [a, b]
    post: [a]
  context:
  - Block
  description: |+
    Remove the item at the top of the stack and discard it.

else:
  opcode: 58
  operations:
  - pre: [blk]
  context:
  - AltEnv
  - AltstepEnv
  description: |+
    Create an alternative for an enclosing alt operation that is
    immediately successful. Block blk contains the code to execute
    if this alternative is chosen by the containing alt.

encode:
  opcode: 196
  operations:
  - pre: [val]
  description: |+
    Attach the encode attribute val to the object owning the
    current block.

encodeo:
  opcode: 198
  operations:
  - pre: [val]
  description: |+
    Attach the overriding encode attribute val to the object
    owning the current block.

encvalue:
  opcode: 423
  operations:
  - pre: [value]
    post: [res]
  context:
  - BehavEnv
  - PredefinedFunctionInterpreter
  description: |+
    Encode value value returning bitstring res holding the encoded
    result.

enum2int:
  opcode: 421
  operations:
  - pre: [enum]
    post: [res]
  context:
  - PredefinedFunctionInterpreter
  description: |+
    Convert enumerated enum into an integer and push it onto the
    stack.

enumerated:
  opcode: 240
  operations:
  - pre: [blk]
    post: [obj]
  context:
  - Block
  description: |+
    Build an enumerated object from the terms described in block
    blk. Push the resulting object onto the stack.

eq:
  opcode: 80
  operations:
  - pre: [a, b]
    post: [res]
  context:
  - Block
  description: |+
    Evaluate a == b, pushing the boolean result.

error:
  opcode: 46
  operations:
  - post: [lit]
  context:
  - Block
  description: |+
    Push a special literal on the stack corresponding to the error
    term of verdicttype.

exec:
  opcode: 55
  operations:
  - pre: [blk]
  context:
  - Block
  description: |+
    Execute block blk. This is an optimisation of if(true), giving
    a space saving of two operations with considerably better
    performance.

    The motivation for this operation is the translation of a
    select statement containing only a single else statement.
    Placing the block inline is not possible because of the issue
    of variable scoping.

execute:
  opcode: 262
  operations:
  - pre: [blk]
    post: [verdict]
  context:
  - BehavEnv
  description: |+
    Execute testcase and return its verdict. The input parameter
    is a block blk containing any actual parameters to the
    testcase, followed by the invocation of the testcase itself.

executed:
  opcode: 285
  operations: []
  description: ""

executel:
  opcode: 263
  operations:
  - pre: [limit, blk]
    post: [verdict]
  context:
  - BehavEnv
  description: |+
    Execute testcase and return its verdict. The input parameter
    is a block blk containing any actual parameters to be supplied
    to the testcase, followed by the invocation of the testcase
    itself. Time limit limit shall be applied to the testcase
    execution.

executeld:
  opcode: 284
  operations: []
  description: ""

extension:
  opcode: 200
  operations:
  - pre: [val]
  description: |+
    Attach the extension attribute val to the object owning the
    current block.

extensiono:
  opcode: 202
  operations:
  - pre: [val]
  description: |+
    Attach the overriding extension attribute val to the object
    owning the current block.

fail:
  opcode: 45
  operations:
  - post: [lit]
  context:
  - Block
  description: |+
    Push a special literal on the stack corresponding to the fail
    term of verdicttype.

"false":
  opcode: 40
  operations:
  - post: [lit]
  context:
  - Block
  description: |+
    Push a special false literal onto the stack.

field:
  opcode: 114
  operations:
  - pre: [type, name]
  context:
  - FieldsEnv
  description: |+
    Build a field description from type and name and attach it to
    the structured type object owning the current block.

fieldo:
  opcode: 115
  operations:
  - pre: [type, name]
  context:
  - FieldsEnv
  description: |+
    Build an optional field description from type and name and
    attach it to the structured type object owning the current
    block.

float:
  opcode: 228
  operations:
  - post: [obj]
  context:
  - Block
  description: |+
    Push the built-in float type object.

float2int:
  opcode: 391
  operations:
  - pre: [flt]
    post: [res]
  context:
  - PredefinedFunctionInterpreter
  description: |+
    Convert float flt into an integer and push it onto the stack.

for:
  opcode: 52
  operations:
  - pre: [init, cond, body, incr]
  context:
  - Block
  description: |+
    Implements the TTCN-3 for statement using four block
    arguments.

    First, block init is executed to establish initial values.

    Block cond is evaluated to test the loop condition. If the
    block yields a true value then block body is executed followed
    by block incr to change the loop condition before looping to
    evaluate the loop condition again.

    Execution terminates when the loop condition returns a false
    value.

    Variables created within block init are visible within blocks
    cond, incr and body. Such variables will be destroyed when the
    operation terminates.

from:
  opcode: 108
  operations:
  - pre: [mapv, setofFromType]
    post: [res]
  context:
  - Block
  description: |+
    Implements the TTCN-3 .from operation applied to mapv of 
    type: `type map from A to B MapT`. A setofFromType is provided
    for creation of the return value. 
    Return value is of type `set of A` containing all keys
    from the map.

fstr:
  opcode: 23
  operations:
  - post: [lit]
  context:
  - Block
  description: |+
    Push a float literal onto the stack, with the value coded as
    an ASCII string to allow for (nearly) arbitrary size and
    precision. This is a variable-length instruction with the
    details of the literal string following the instruction
    itself: first, a length field, and then the bytes of the
    string.

    The length field is encoded with the same byte order as has
    been selected for instructions. The string itself is always
    encoded with the first byte of the string at the lowest file
    offset – the natural ordering for strings.

    Padding shall be placed at the end of the string bytes to
    restore the correct alignment for following instructions.

function:
  opcode: 144
  operations:
  - pre: [pblk, bblk, name]
  context:
  - DefineEnv
  description: |+
    Define a function object from a block pblk containing its
    parameters, bblk containing its behaviour and a name, and then
    attach it to the module object owning the current block.

functionb:
  opcode: 145
  operations:
  - pre: [comp, pblk, bblk, name]
  context:
  - DefineEnv
  description: |+
    Define a bound function object from a component type comp, a
    block pblk containing its parameters, bblk containing its
    behaviour and a name, then attach it to the module object
    owning the current block.

functionv:
  opcode: 148
  operations:
  - pre: [type, pblk, bblk, name]
  context:
  - DefineEnv
  description: |+
    Define a value-returning function object from return type, a
    block pblk containing its parameters, bblk containing its
    behaviour and a name, and then attach it to the module object
    owning the current block.

functionvb:
  opcode: 149
  operations:
  - pre: [type, comp, pblk, bblk, name]
  context:
  - DefineEnv
  description: |+
    Define a value-returning bound function object from return
    type, a component type comp, a block pblk containing its
    parameters, bblk containing its behaviour and a name, then
    attach it to the module object owning the current block.

functionx:
  opcode: 152
  operations:
  - pre: [pblk, name]
  context:
  - DefineEnv
  description: |+
    Define an external function object from a block pblk
    containing its parameters and a name, and then attach it to
    the module object owning the current block.

functionxv:
  opcode: 154
  operations:
  - pre: [type, pblk, name]
  context:
  - DefineEnv
  description: |+
    Define a value-returning external function object from return
    type, a block pblk containing its parameters and a name, and
    then attach it to the module object owning the current block.

functionxvw:
  opcode: 155
  operations:
  - pre: [type, ablk, pblk, name]
  context:
  - DefineEnv
  description: |+
    Define a value-returning external function object from return
    type, a block pblk containing its parameters and a name,
    attach the attributes from block ablk, and then attach it to
    the module object owning the current block.

functionxw:
  opcode: 153
  operations:
  - pre: [ablk, pblk, name]
  context:
  - DefineEnv
  description: |+
    Define an external function object from a block pblk
    containing its parameters and a name, attach the attributes
    from block ablk, and then attach it to the module object
    owning the current block.

ge:
  opcode: 81
  operations:
  - pre: [a, b]
    post: [res]
  context:
  - Block
  description: |+
    Evaluate a >= b, pushing the boolean result.

get:
  opcode: 87
  operations:
  - pre: [obj, idx]
    post: [obj]
  - pre: [obj, name]
    post: [obj]
  context:
  - Block
  description: |+
    When object obj is of type record, record-of, set, set-of,
    union, array or string, fetch a reference to the element
    indexed by idx, where idx is an unsigned integer value.

    When object obj is of type component fetch a reference to the
    field name.

getverdict:
  opcode: 260
  operations:
  - post: [lver]
  context:
  - BehavEnv
  description: |+
    Get the local verdict of the current component and push it on
    the stack. Use within the control part is a runtime error.

gt:
  opcode: 82
  operations:
  - pre: [a, b]
    post: [res]
  context:
  - Block
  description: |+
    Evaluate a > b, pushing the boolean result.

halt:
  opcode: 314
  operations:
  - pre: [p]
  context:
  - BehavEnv
  description: |+
    Instruct port p to accept no further input.

halta:
  opcode: 315
  operations: []
  context:
  - BehavEnv
  description: |+
    Instruct all ports on the current component to accept no
    further input.

hex2bit:
  opcode: 400
  operations:
  - pre: [hex]
    post: [res]
  context:
  - PredefinedFunctionInterpreter
  description: |+
    Convert hexstring hex into a bitstring and push it onto the
    stack.

hex2int:
  opcode: 399
  operations:
  - pre: [hex]
    post: [res]
  context:
  - PredefinedFunctionInterpreter
  description: |+
    Convert hexstring hex into an integer and push it onto the
    stack.

hex2oct:
  opcode: 401
  operations:
  - pre: [hex]
    post: [res]
  context:
  - PredefinedFunctionInterpreter
  description: |+
    Convert hexstring hex into an octetstring and push it onto the
    stack.

hex2str:
  opcode: 402
  operations:
  - pre: [hex]
    post: [res]
  context:
  - PredefinedFunctionInterpreter
  description: |+
    Convert hexstring hex into a charstring and push it onto the
    stack.

hexstring:
  opcode: 229
  operations:
  - post: [obj]
  context:
  - Block
  description: |+
    Push the built-in hexstring type object.

idef:
  opcode: 92
  operations: []
  context:
  - Block
  description: ""

ieee754dp:
  opcode: 21
  operations:
  - post: [lit]
  context:
  - Block
  description: |+
    Push a float literal onto the stack. The encoding of the
    floating-point value follows the instruction word and shall be
    in IEEE754 double-precision format.

    IEEE754 double precision has a fixed size of 64-bits. Padding
    will be required if the current instruction width is greater
    than 64-bit.

    The eight bytes of the representation must be swapped if
    swapping is enabled.

if:
  opcode: 48
  operations:
  - pre: [cond, blk]
  context:
  - Block
  description: |+
    Execute block blk if cond is true.

ifelse:
  opcode: 49
  operations:
  - pre: [cond, tblk, fblk]
  context:
  - Block
  description: |+
    Execute block tblk if cond is true else execute block fblk.

ifield:
  opcode: 93
  operations: []
  context:
  - FieldsEnv
  description: ""

ifpresent:
  opcode: 99
  operations:
  - pre: [obj]
    post: [obj]
  context:
  - Block
  description: |+
    Modify obj to allow it to match optional fields in record or
    set objects. Leave the object on the stack.

iget:
  opcode: 90
  operations:
  - pre: [obj]
    post: [obj]
  context:
  - Block
  description: |+
    When object obj is of type record, record-of, set, set-of,
    union, array or string, fetch a reference to the element
    indexed by x, where x is an unsigned integer value in the
    range 0 to 32767.

    This is the performance-optimised version of the get operation
    above.

in:
  opcode: 116
  operations:
  - pre: [type, name]
  description: |+
    Bind a type and name into an input value parameter object and
    then attach this to the owning function (altstep, testcase)
    object.

inconc:
  opcode: 44
  operations:
  - post: [lit]
  context:
  - Block
  description: |+
    Push a special literal on the stack corresponding to the
    inconc term of verdicttype.

infinityn:
  opcode: 38
  operations:
  - post: [lit]
  context:
  - Block
  description: |+
    Push a special -infinity literal onto the stack.

infinityp:
  opcode: 39
  operations:
  - post: [lit]
  context:
  - Block
  description: |+
    Push a special +infinity literal onto the stack.

inout:
  opcode: 117
  operations:
  - pre: [type, name]
  description: |+
    Bind a type and name into an input/output value parameter
    object and then attach this to the owning function (altstep,
    testcase) object.

int2bit:
  opcode: 386
  operations:
  - pre: [int, len]
    post: [res]
  context:
  - PredefinedFunctionInterpreter
  description: |+
    Convert integer int into a bitstring and push it onto the
    stack. len supplies a minimum length for the resulting string.

int2char:
  opcode: 384
  operations:
  - pre: [int]
    post: [res]
  context:
  - PredefinedFunctionInterpreter
  description: |+
    Convert integer int into a single character string and push it
    onto the stack.

int2enum:
  opcode: 426
  operations: []
  context:
  - PredefinedFunctionInterpreter
  description: ""

int2float:
  opcode: 390
  operations:
  - pre: [int]
    post: [res]
  context:
  - PredefinedFunctionInterpreter
  description: |+
    Convert integer int into a float and push it onto the stack.

int2hex:
  opcode: 387
  operations:
  - pre: [int, len]
    post: [res]
  context:
  - PredefinedFunctionInterpreter
  description: |+
    Convert integer int into a hexstring and push it onto the
    stack. len supplies a minimum length for the resulting string.

int2oct:
  opcode: 388
  operations:
  - pre: [int, len]
    post: [res]
  context:
  - PredefinedFunctionInterpreter
  description: |+
    Convert integer int into an octetstring and push it onto the
    stack. len supplies a minimum length for the resulting string.

int2str:
  opcode: 389
  operations:
  - pre: [int]
    post: [res]
  context:
  - PredefinedFunctionInterpreter
  description: |+
    Convert integer int into a charstring and push it onto the
    stack.

integer:
  opcode: 230
  operations:
  - post: [obj]
  context:
  - Block
  description: |+
    Push the built-in integer type object.

interleave:
  opcode: 57
  operations:
  - pre: [blk]
  context:
  - ActionEnv
  - BehavEnv
  description: |+
    Evaluate the contents of blk until all of the contained
    alternatives succeed.

    An empty block is allowed: activated defaults will still be
    included in the operation.

    Actions attached to successful alternatives may extend the set
    of alternatives to complete.

isbound:
  opcode: 429
  operations: []
  context:
  - PredefinedFunctionInterpreter
  description: ""

ischosen:
  opcode: 415
  operations:
  - pre: [obj]
    post: [res]
  context:
  - PredefinedFunctionInterpreter
  description: |+
    Tests the object obj to determine if it is the selected field
    of a union and pushes the boolean result. obj must reference a
    field of a union.

ispresent:
  opcode: 414
  operations:
  - pre: [obj]
    post: [res]
  context:
  - PredefinedFunctionInterpreter
  description: |+
    Tests the presence of object obj and pushes the boolean
    result. obj must reference an optional field of a record or
    set.

istr:
  opcode: 22
  operations:
  - post: [lit]
  context:
  - Block
  description: |+
    Push an integer literal onto the stack, with the integer coded
    as an ASCII string to allow for (nearly) arbitrary size. This
    is a variable-length instruction with the details of the
    literal string following the instruction itself: first, a
    length field, and then the bytes of the string.

    The length field is encoded with the same byte order as has
    been selected for instructions. The string itself is always
    encoded with the first byte of the string at the lowest file
    offset – the natural ordering for strings.

    Padding shall be placed at the end of the string bytes to
    restore the correct alignment for following instructions.

isvalue:
  opcode: 422
  operations:
  - pre: [obj]
    post: [res]
  context:
  - PredefinedFunctionInterpreter
  description: |+
    Tests the object obj to determine is it is concrete value
    (defined, not a template) and pushes the boolean result.

kill:
  opcode: 316
  operations:
  - pre: [comp]
  context:
  - BehavEnv
  description: |+
    Stop behaviour on component comp and move it to the killed
    state.

killa:
  opcode: 317
  operations: []
  context:
  - BehavEnv
  description: |+
    Stop behaviour on all parallel test components, moving them to
    the killed state.

killed:
  opcode: 292
  operations:
  - pre: [comp]
  context:
  - ConditionEnv
  description: |+
    Test the state of component comp for the killed condition,
    contributing this to an enclosing alt or interleave statement.

killed1:
  opcode: 293
  operations: []
  context:
  - ConditionEnv
  description: |+
    Test the state of all parallel test components for any that
    are killed, contributing this to an enclosing alt or
    interleave statement.

killeda:
  opcode: 294
  operations: []
  context:
  - ConditionEnv
  description: |+
    Test the state of all parallel test components checking that
    all are killed, contributing this to an enclosing alt or
    interleave statement.

le:
  opcode: 83
  operations:
  - pre: [a, b]
    post: [res]
  context:
  - Block
  description: |+
    Evaluate a <= b, pushing the boolean result.

length:
  opcode: 100
  operations:
  - pre: [obj, len]
    post: [obj]
  context:
  - Block
  description: |+
    Create a length restriction with length len and apply to obj,
    leaving the result on the stack. len may be a range
    constructed with the range operation.

lengthof:
  opcode: 411
  operations:
  - pre: [str]
    post: [len]
  context:
  - PredefinedFunctionInterpreter
  description: |+
    Takes the length of the string-type object str and pushes it
    onto the stack.

load:
  opcode: 5
  operations:
  - pre: []
    post: [obj]
  description: |+
    Loads a local object indexed by x, where x is an unsigned
    integer value in the range 0 to 32767.

store:
  opcode: 6
  operations:
  - pre: [obj]
    post: []
  description: |+
    Stores a local object indexed by x, where x in an unsigned
    integer value in the range 0 to 32767.

log:
  opcode: 257
  operations:
  - pre: [coll]
  - pre: [obj]
  context:
  - BehavEnv
  description: |+
    Log the items in collection coll or log the single object obj.

lt:
  opcode: 84
  operations:
  - pre: [a, b]
    post: [res]
  context:
  - Block
  description: |+
    Evaluate a < b, pushing the boolean result.

map:
  opcode: 268
  operations:
  - pre: [p1, p2]
  context:
  - BehavEnv
  description: |+
    Map port p1 to port p2.

mapt:
  opcode: 252
  operations:
  - pre: [typek, typev]
    post: [obj]
  context:
  - Block
  description: |+
    Construct a map type object with key typek and value typev
    and push on to the stack.

mark:
  opcode: 12
  operations:
  - post: [mark]
  context:
  - Block
  description: |+
    Push a mark object onto the stack.

match:
  opcode: 258
  operations:
  - pre: [expr, tmpl]
    post: [res]
  context:
  - BehavEnv
  description: |+
    Perform template matching of expression expr against template
    tmpl returning a boolean result on the stack.

mod:
  opcode: 70
  operations:
  - pre: [a, b]
    post: [res]
  context:
  - Block
  description: |+
    Evaluate a mod b, pushing the result on the stack. The TTCN-3
    definition of mod applies.

    The types of a and b must be compatible. The returned object
    has the base type of the input parameters and is constant.

module:
  opcode: 142
  operations:
  - pre: [bblk, name]
  context:
  - LoadEnv
  description: |+
    Define a module object and attach it to the source object
    owning the current block. Parameters are a block dblk of
    sub-definitions and the group name.

move:
  opcode: 94
  operations: []
  context:
  - Environment
  description: ""

mpar:
  opcode: 160
  operations:
  - pre: [type, name]
  context:
  - ModuleEnv
  description: |+
    Create a module parameter definition from its type and a name.

mpard:
  opcode: 161
  operations:
  - pre: [vblk, type, name]
  context:
  - ModuleEnv
  description: |+
    Create a module parameter definition from a block vblk
    containing the statements of its default value, its type and a
    name.

mtc:
  opcode: 33
  operations:
  - post: [obj]
  context:
  - BehavEnv
  description: |+
    Fetch a reference to the current MTC and push it on the stack.

mul:
  opcode: 68
  operations:
  - pre: [a, b]
    post: [res]
  context:
  - Block
  description: |+
    Evaluate a * b, pushing the result on the stack.

    The types of a and b must be compatible. The returned object
    has the base type of the input parameters and is constant.

name:
  opcode: 24
  operations:
  - post: [lit]
  context:
  - Block
  description: |+
    Push an object name literal onto the stack, coded as an ASCII
    string. This is a variable-length instruction with the details
    of the name following the instruction itself: first, a length
    field, and then the bytes of the string.

    The length field is encoded with the same byte order as has
    been selected for instructions. The string itself is always
    encoded with the first byte of the string at the lowest file
    offset – the natural ordering for strings.

    Padding shall be placed at the end of the string bytes to
    restore the correct alignment for following instructions.

natlong:
  opcode: 20
  operations:
  - post: [lit]
  context:
  - Block
  description: |+
    Push a signed integer literal onto the stack. This is a
    variable-length instruction with the value of the literal
    integer following the instruction itself as a native long.

    The literal integer value is encoded at the same width and
    byte ordering as is currently selected for instructions: is
    must be swapped when swapping is enabled.

    If the currently selected instruction width is too small for
    the encoding of a particular value then the istr literal
    operation shall be used instead.

ne:
  opcode: 85
  operations:
  - pre: [a, b]
    post: [res]
  context:
  - Block
  description: |+
    Evaluate a != b, pushing the boolean result.

neg:
  opcode: 66
  operations:
  - pre: [a]
    post: [res]
  context:
  - Block
  description: |+
    Evaluate -a (unary - operator) pushing the result.

nibbles:
  opcode: 18
  operations:
  - post: [lit]
  context:
  - Block
  description: |+
    Encoding of 9 nibbles, showing nibble endian-ness:
    ‘BADC0FFEE’H

    Note: 9th nibble in the upper half of most significant byte

    0000 0123
    0000 0009
    BADC 0FFE
    E000 0000

none:
  opcode: 42
  operations:
  - post: [lit]
  context:
  - Block
  description: |+
    Push a special literal on the stack corresponding to the none
    term of verdicttype.

nop:
  opcode: 0
  operations: []
  description: |+
    No operation.

    nop shall normally be combined with eswap. Refer to the eswap
    operation.

not:
  opcode: 73
  operations:
  - pre: [a]
    post: [res]
  context:
  - Block
  description: |+
    With boolean input, perform the logical not operation and
    return the boolean result.

    With bitstring, hexstring or octetstring input, perform the
    bitwise not operation and return the result. The result type
    will be of the same base type as the inputs.

now:
  opcode: 308
  operations: []
  context:
  - Block
  description: ""

"null":
  opcode: 32
  operations: []
  description: ""

oct2bit:
  opcode: 404
  operations:
  - pre: [oct]
    post: [res]
  context:
  - PredefinedFunctionInterpreter
  description: |+
    Convert octetstring oct into a bitstring and push it onto the
    stack.

oct2chr:
  opcode: 407
  operations: []
  context:
  - PredefinedFunctionInterpreter
  description: ""

oct2hex:
  opcode: 405
  operations:
  - pre: [oct]
    post: [res]
  context:
  - PredefinedFunctionInterpreter
  description: |+
    Convert octetstring oct into a hexstring and push it onto the
    stack.

oct2int:
  opcode: 403
  operations:
  - pre: [oct]
    post: [res]
  context:
  - PredefinedFunctionInterpreter
  description: |+
    Convert octetstring oct into an integer and push it onto the
    stack.

oct2str:
  opcode: 406
  operations:
  - pre: [oct]
    post: [res]
  context:
  - PredefinedFunctionInterpreter
  description: |+
    Convert octetstring oct into a charstring and push it onto the
    stack.

octets:
  opcode: 19
  operations:
  - post: [lit]
  context:
  - Block
  description: |+
    Push an octetstring literal onto the stack. This is a
    variable-length instruction with the details of the literal
    octetstring following the instruction itself: first, a length
    field, and then the bytes of the octetstring.

    The length field is encoded with the same byte order as has
    been selected for instructions. The length contains the number
    of octets.

    The string itself is always encoded with the first octet of
    the string at the lowest file offset – the natural ordering
    for strings.

    Padding shall be placed at the end of the string bytes to
    restore the correct alignment for following instructions.

octetstring:
  opcode: 231
  operations:
  - post: [obj]
  context:
  - Block
  description: |+
    Push the built-in octetstring type object.

omit:
  opcode: 37
  operations:
  - post: [lit]
  context:
  - Block
  description: |+
    Push a special omit literal onto the stack.

or:
  opcode: 74
  operations:
  - pre: [boola, boolb]
    post: [res]
  - pre: [bool, blk]
    post: [res]
  - pre: [bina, binb]
    post: [res]
  context:
  - Block
  description: |+
    With a boolean first argument perform the logical or operation
    and return the boolean result. The second argument shall be
    either another boolean or a block. If the first argument is
    true then the second argument shall not be evaluated.

    With bitstring, hexstring or octetstring inputs, perform the
    bitwise or operation and return the result. The result type
    will be of the same base type as the inputs.

out:
  opcode: 118
  operations:
  - pre: [type, name]
  description: |+
    Bind a type and name into an output value parameter object and
    then attach this to the owning function (altstep, testcase)
    object.

pass:
  opcode: 43
  operations:
  - post: [lit]
  context:
  - Block
  description: |+
    Push a special literal on the stack corresponding to the pass
    term of verdicttype.

pattern:
  opcode: 101
  operations:
  - pre: [str]
    post: [pat]
  context:
  - Block
  description: |+
    Make string str into a pattern template literal and push this
    on the stack.

    In addition to the obvious use with charstring and universal
    charstring types, pattern shall be used for bitstring,
    hexstring and octetstring literals when they contain
    pattern-matching characters.

permito:
  opcode: 120
  operations:
  - pre: [type]
    post: [type]
  context:
  - Block
  description: |+
    Modifies a type object to allow it to have the special omit
    value.

permitp:
  opcode: 122
  operations:
  - pre: [type]
    post: [type]
  context:
  - Block
  description: |+
    Modifies a type object to allow it to have ifpresent values.

permitt:
  opcode: 121
  operations:
  - pre: [type]
    post: [type]
  context:
  - Block
  description: |+
    Modifies a type object to allow it to have template values.

permutation:
  opcode: 102
  operations:
  - pre: [vlist]
    post: [res]
  context:
  - Block
  description: |+
    Make a permutation template literal from the input value list
    vlist. Push the resulting object on the stack.

portm:
  opcode: 244
  operations:
  - pre: [iblk, oblk]
    post: [ptype]
  context:
  - Block
  description: |+
    Construct a message port type object push onto the stack.
    Block iblk shall contain a list of types allowed in through
    the port and block oblk shall contain a list of types allowed
    out through the port. The same type may appear in both lists.

    Refer to the TTCN-3 specification for the precise meaning of
    the terms in and out under various circumstances.

portma:
  opcode: 246
  operations: []
  context:
  - Block
  description: ""

pos:
  opcode: 64
  operations:
  - pre: [a]
    post: [res]
  context:
  - Block
  description: |+
    Evaluate +a (unary + operator) pushing the result.

range:
  opcode: 103
  operations:
  - pre: [lower, upper]
    post: [obj]
  context:
  - Block
  description: |+
    Construct a range template literal from bounds lower and
    upper. Push the resulting object on the stack.

read:
  opcode: 304
  operations:
  - pre: [tmr]
    post: [rem]
  context:
  - BehavEnv
  description: |+
    Read the remaining duration of timer tmr and push the float
    result onto the stack.

receive:
  opcode: 324
  operations:
  - pre: [mblk, ablk, port]
  context:
  - ConditionEnv
  description: |+
    Create a receive condition on port port. Block mblk shall
    contain code to perform the matching of input. When the
    condition is true (matched) then the enclosing alt will
    execute block ablk to perform variable assignments.

receive1:
  opcode: 326
  operations: []
  context:
  - ConditionEnv
  description: ""

receivec:
  opcode: 325
  operations:
  - pre: [mblk, ablk, port]
  context:
  - ConditionEnv
  description: |+
    Create a checked receive condition on port port. Block mblk
    shall contain code to perform the matching of input. When the
    condition is true (matched) then the enclosing alt will
    execute block ablk to perform variable assignments.

receivec1:
  opcode: 327
  operations: []
  context:
  - ConditionEnv
  description: ""

record:
  opcode: 248
  operations:
  - pre: [fblk]
    post: [obj]
  context:
  - Block
  description: |+
    Construct a record object from field definitions in block fblk
    and push on to the stack.

recordof:
  opcode: 250
  operations:
  - pre: [type]
    post: [obj]
  context:
  - Block
  description: |+
    Construct a record-of object with element of type type and
    push on to the stack.

ref_bit2hex:
  opcode: 476
  operations: []
  description: ""

ref_bit2int:
  opcode: 475
  operations: []
  description: ""

ref_bit2oct:
  opcode: 477
  operations: []
  description: ""

ref_bit2str:
  opcode: 478
  operations: []
  description: ""

ref_char2int:
  opcode: 472
  operations: []
  description: ""

ref_char2oct:
  opcode: 473
  operations: []
  description: ""

ref_decvalue:
  opcode: 504
  operations: []
  description: ""

ref_encvalue:
  opcode: 503
  operations: []
  description: ""

ref_enum2int:
  opcode: 501
  operations: []
  description: ""

ref_float2int:
  opcode: 471
  operations: []
  description: ""

ref_hex2bit:
  opcode: 480
  operations: []
  description: ""

ref_hex2int:
  opcode: 479
  operations: []
  description: ""

ref_hex2oct:
  opcode: 481
  operations: []
  description: ""

ref_hex2str:
  opcode: 482
  operations: []
  description: ""

ref_int2bit:
  opcode: 466
  operations: []
  description: ""

ref_int2char:
  opcode: 464
  operations: []
  description: ""

ref_int2enum:
  opcode: 506
  operations: []
  description: ""

ref_int2float:
  opcode: 470
  operations: []
  description: ""

ref_int2hex:
  opcode: 467
  operations: []
  description: ""

ref_int2oct:
  opcode: 468
  operations: []
  description: ""

ref_int2str:
  opcode: 469
  operations: []
  description: ""

ref_isbound:
  opcode: 509
  operations: []
  description: ""

ref_ispresent:
  opcode: 494
  operations: []
  description: ""

ref_isvalue:
  opcode: 502
  operations: []
  description: ""

ref_oct2bit:
  opcode: 484
  operations: []
  description: ""

ref_oct2chr:
  opcode: 487
  operations: []
  description: ""

ref_oct2hex:
  opcode: 485
  operations: []
  description: ""

ref_oct2int:
  opcode: 483
  operations: []
  description: ""

ref_oct2str:
  opcode: 486
  operations: []
  description: ""

ref_regexp:
  opcode: 496
  operations: []
  description: ""

ref_str2float:
  opcode: 490
  operations: []
  description: ""

ref_str2hex:
  opcode: 508
  operations: []
  description: ""

ref_str2int:
  opcode: 488
  operations: []
  description: ""

ref_str2oct:
  opcode: 489
  operations: []
  description: ""

ref_testcasename:
  opcode: 505
  operations: []
  description: ""

ref_val2str:
  opcode: 493
  operations: []
  description: ""

regexp:
  opcode: 416
  operations:
  - pre: [str, expr, gno]
    post: [res]
  context:
  - PredefinedFunctionInterpreter
  description: |+
    Perform a regular expression match of str against expr.
    Returns the gno-th matching bracketed sub-expression or an
    empty string if no match.

rem:
  opcode: 71
  operations:
  - pre: [a, b]
    post: [res]
  context:
  - Block
  description: |+
    Evaluate a rem b, pushing the result on the stack. The TTCN-3
    definition of rem applies.

    The types of a and b must be compatible. The returned object
    has the base type of the input parameters and is constant.

repeat:
  opcode: 59
  operations: []
  description: |+
    Cause the immediate repeat of the evaluation of the current
    enclosing alt.

replace:
  opcode: 418
  operations:
  - pre: [str, idx, len, rep]
    post: [res]
  context:
  - PredefinedFunctionInterpreter
  description: |+
    Replace the substring of str, from index idx, for length len,
    with the string rep and return the resulting string.

return:
  opcode: 50
  operations: []
  context:
  - BehavEnv
  description: |+
    Causes immediate exit from the current function, altstep,
    testcase or control.

rnd:
  opcode: 419
  operations:
  - post: [num]
  context:
  - PredefinedFunctionInterpreter
  description: |+
    Compute a random float in the range 0 and 1 exclusive, and
    return the result.

rol:
  opcode: 78
  operations:
  - pre: [str, num]
    post: [res]
  context:
  - Block
  description: |+
    Rotate string str left by num items, and return the result.

ror:
  opcode: 79
  operations:
  - pre: [str, num]
    post: [res]
  context:
  - Block
  description: |+
    Rotate string str right by num items, and return the result.

running:
  opcode: 288
  operations:
  - pre: [comp]
    post: [res]
  - pre: [tmr]
    post: [res]
  context:
  - BehavEnv
  description: |+
    When called with a component reference comp, evaluate the
    running state of the component and push the boolean result
    onto the stack.

    When called with a timer reference tmr, evaluate the running
    state of the timer and push the boolean result onto the stack.

running1c:
  opcode: 289
  operations:
  - post: [res]
  context:
  - BehavEnv
  description: |+
    Evaluate the state of parallel test components to determine if
    any are in the running state. Push the boolean result on the
    stack.

running1t:
  opcode: 305
  operations:
  - post: [res]
  context:
  - BehavEnv
  description: |+
    Evaluate the state of timers on the current component to
    determine if any are in the running state. Push the boolean
    result on the stack.

runningac:
  opcode: 290
  operations:
  - post: [res]
  context:
  - BehavEnv
  description: |+
    Evaluate the state of parallel test components to determine if
    all are in the running state. Push the boolean result on the
    stack.

scan:
  opcode: 13
  operations: []
  context:
  - Block
  description: |+
    Switch from instruction execution to scanning until a matching
    block is seen.

self:
  opcode: 34
  operations:
  - post: [obj]
  context:
  - BehavEnv
  description: |+
    Fetch a reference to the current component and push it on the
    stack.

send:
  opcode: 320
  operations:
  - pre: [msg, port]
  context:
  - BehavEnv
  description: |+
    Send message msg on port port with no explicit addressing.

send1:
  opcode: 321
  operations:
  - pre: [dest, msg, port]
  context:
  - BehavEnv
  description: |+
    Send message msg on port port to single destination dest
    (unicast.)

senda:
  opcode: 323
  operations:
  - pre: [msg, port]
  context:
  - BehavEnv
  description: |+
    Send message msg on port port to all associated destinations
    (broadcast.)

sender:
  opcode: 382
  operations:
  - post: [obj]
  description: |+
    Fetch the sender (from) address of the current communication
    operation.

sendn:
  opcode: 322
  operations:
  - pre: [dblk, msg, port]
  context:
  - BehavEnv
  description: |+
    Send message msg on port port to all destinations in block
    dblk (multicast.)

set:
  opcode: 249
  operations:
  - pre: [fblk]
    post: [obj]
  context:
  - Block
  description: |+
    Construct a set object from field definitions in block fblk
    and push on to the stack.

setof:
  opcode: 251
  operations:
  - pre: [type]
    post: [obj]
  context:
  - Block
  description: |+
    Construct a set-of object with element of type type and push
    on to the stack.

setverdict:
  opcode: 261
  operations:
  - pre: [lver]
  context:
  - BehavEnv
  description: |+
    Set the local verdict of the current component from parameter
    lver. Use within the control part is a runtime error.

shl:
  opcode: 76
  operations:
  - pre: [str, num]
    post: [res]
  context:
  - Block
  description: |+
    Shift string str left by num items, and return the result.

shr:
  opcode: 77
  operations:
  - pre: [str, num]
    post: [res]
  context:
  - Block
  description: |+
    Shift string str right by num items, and return the result.

sizeof:
  opcode: 412
  operations:
  - pre: [obj]
    post: [size]
  context:
  - PredefinedFunctionInterpreter
  description: |+
    Pushes the number of elements in obj onto the stack as an
    integer value.

skip:
  opcode: 36
  operations:
  - post: [lit]
  context:
  - Block
  description: |+
    Push a special literal onto the stack, corresponding to the
    TTCN-3 ‘-‘ and meaning ‘skip this item.’

    As an optimisation, skip may be used instead of an empty
    block, saving one operation and avoid invocation of the block
    scanning mechanism.

smatch:
  opcode: 15
  operations: []
  context:
  - BehavEnv
  description: ""

source:
  opcode: 141
  operations:
  - pre: [mblk, name]
  context:
  - LoadEnv
  description: |+
    Define a source file object with file name name and module
    definitions contained in block mblk.

specplc:
  opcode: 212
  operations: []
  context:
  - Block
  description: ""

start:
  opcode: 296
  operations:
  - pre: [port]
  - pre: [tmr]
  context:
  - BehavEnv
  description: |+
    When called with a port reference port, start activity on the
    port.

    When called with a timer reference tmr, start the timer
    running (or restart.)

startap:
  opcode: 299
  operations: []
  context:
  - BehavEnv
  description: |+
    Start activity on all ports.

startc:
  opcode: 297
  operations:
  - pre: [blk, comp]
  context:
  - BehavEnv
  description: |+
    Start behaviour on parallel test component comp. Block blk
    contains the instructions to execute in the context of the
    newly started component – the behaviour. This shall take the
    form of any parameters followed by a function call.

startd:
  opcode: 298
  operations:
  - pre: [dur, tmr]
  context:
  - BehavEnv
  description: |+
    Start timer tmr, with explicit duration dur.

step:
  opcode: 62
  operations:
  - pre: [cblk, sblk]
  context:
  - AltEnv
  - AltstepEnv
  - InterleaveEnv
  description: |+
    Create an alternative for an enclosing alt operation,
    associating some condition with statements to perform should
    the condition be chosen by the alt operation. Block cblk
    contains code to execute to evaluate the condition of the
    alternative. Block sblk contains code to execute should be
    condition be chosen.

stop:
  opcode: 300
  operations:
  - pre: [comp]
  - pre: [port]
  - pre: [tmr]
  context:
  - BehavEnv
  description: |+
    When called with a component reference comp, stop behaviour on
    the component.

    When called with a port reference port, stop activity on the
    port.

    When called with a timer reference tmr, stop the timer.

stopac:
  opcode: 301
  operations: []
  context:
  - BehavEnv
  description: |+
    Stop all parallel test components. Permitted only from the
    master test component.

stopap:
  opcode: 302
  operations: []
  context:
  - BehavEnv
  description: |+
    Stop all ports.

stopat:
  opcode: 303
  operations: []
  context:
  - BehavEnv
  description: |+
    Stop all timers on the current component.

stopi:
  opcode: 51
  operations: []
  description: |+
    From within the behaviour of a component, causes immediate
    termination of the behaviour of that component.

    From within the behaviour of a control part, causes immediate
    termination of the execution of that control part.

str2float:
  opcode: 410
  operations:
  - pre: [char]
    post: [res]
  context:
  - PredefinedFunctionInterpreter
  description: |+
    Convert charstring char into a float, and push it onto the
    stack.

str2hex:
  opcode: 428
  operations: []
  context:
  - PredefinedFunctionInterpreter
  description: ""

str2int:
  opcode: 408
  operations:
  - pre: [char]
    post: [res]
  context:
  - PredefinedFunctionInterpreter
  description: |+
    Convert charstring char into an integer, and push it onto the
    stack.

str2oct:
  opcode: 409
  operations:
  - pre: [char]
    post: [res]
  context:
  - PredefinedFunctionInterpreter
  description: |+
    Convert charstring char into an octetstring, and push it onto
    the stack.

sub:
  opcode: 67
  operations:
  - pre: [a, b]
    post: [res]
  context:
  - Block
  description: |+
    Evaluate a – b, pushing the result on the stack.

    The types of a and b must be compatible. The returned object
    has the base type of the input parameters and is constant.

subset:
  opcode: 104
  operations:
  - pre: [vlist]
    post: [res]
  context:
  - Block
  description: |+
    Make a subset template literal from the input value list
    vlist. Push the resulting object on the stack.

substr:
  opcode: 417
  operations:
  - pre: [str, idx, len]
    post: [res]
  context:
  - PredefinedFunctionInterpreter
  description: |+
    Return the substring of str, from index idx, for length len.

subtype:
  opcode: 239
  operations:
  - pre: [type, cons]
    post: [res]
  context:
  - Block
  description: |+
    Create a subtype from type applying constraint cons, pushing
    the resulting type object on the stack. Constraint cons may be
    a single object or a collection of objects.

superset:
  opcode: 105
  operations:
  - pre: [vlist]
    post: [res]
  context:
  - Block
  description: |+
    Make a superset template literal from the input value list
    vlist. Push the resulting object on the stack.

system:
  opcode: 35
  operations:
  - post: [obj]
  context:
  - BehavEnv
  description: |+
    Fetch a reference to the current test system interface
    component and push it on the stack.

tcstop:
  opcode: 286
  operations: []
  description: ""

template:
  opcode: 164
  operations:
  - pre: [type, pblk, bblk, name]
  context:
  - AltstepEnv
  - BehavEnv
  - DefineEnv
  - FixupEnv
  - InitEnv
  description: |+
    Define a template object from return type, a block pblk
    containing its parameters, bblk containing its behaviour and a
    name, and then attach it to the module object owning the
    current block.

term:
  opcode: 113
  operations:
  - pre: [tval, name]
  description: |+
    Bind an integer value and name into an enumeration term
    definition and then attach this to the owning enumeration
    object.

testcase:
  opcode: 168
  operations:
  - pre: [rcomp, pblk, bblk, name]
    post: [verdict]
  context:
  - DefineEnv
  description: |+
    Define a testcase object from a runs-on component type rcomp,
    a block pblk containing its parameters, bblk containing its
    behaviour and a name, and then attach it to the module object
    owning the current block.

testcasename:
  opcode: 425
  operations:
  - post: [name]
  context:
  - PredefinedFunctionInterpreter
  description: |+
    Retrieve the current testcase name and push onto the stack.
    Returns an empty string if called outside any executing
    testcase.

testcases:
  opcode: 169
  operations:
  - pre: [scomp, rcomp, pblk, bblk, name]
    post: [verdict]
  context:
  - DefineEnv
  description: |+
    Define a testcase object from a system component type scomp, a
    runs-on component type rcomp, a block pblk containing its
    parameters, bblk containing its behaviour and a name, and then
    attach it to the module object owning the current block.

testcasesw:
  opcode: 171
  operations: []
  description: |+
    Define a testcase object from a system component type scomp, a
    runs-on component type rcomp, a block pblk containing its
    parameters, bblk containing its behaviour and a name, and then
    attach it to the module object owning the current block.
    Attach attributes from block ablk.

testcasew:
  opcode: 170
  operations:
  - pre: [ablk, rcomp, pblk, bblk, name]
    post: [verdict]
  description: |+
    Define a testcase object from a runs-on component type rcomp,
    a block pblk containing its parameters, bblk containing its
    behaviour and a name, and then attach it to the module object
    owning the current block. Attach attributes from block ablk.

timeout:
  opcode: 306
  operations:
  - pre: [tmr]
  - pre: [port]
  context:
  - ConditionEnv
  description: |+
    Create a timeout alternative bound to timer tmr and attach
    this to the enclosing alt operation.

    Create a timeout alternative bound to port port and attach
    this to the enclosing alt operation.

timeout1:
  opcode: 307
  operations: []
  context:
  - ConditionEnv
  description: |+
    Create a timeout alternative bound to the expiry of any
    current timer and attach this to the enclosing alt operation.

timer:
  opcode: 237
  operations:
  - post: [obj]
  context:
  - Block
  description: |+
    Push the built-in timer type object.

timestamp:
  opcode: 383
  operations: []
  description: ""

to:
  opcode: 109
  operations:
  - pre: [mapv, setofToType]
    post: [res]
  context:
  - Block
  description: |+
    Implements the TTCN-3 .to operation applied to mapv of 
    type: `type map from A to B MapT`. A setofToType is provided
    for creation of the return value. 
    Return value is of type `set of B` containing all values
    from the map.

trigger:
  opcode: 328
  operations:
  - pre: [mblk, ablk, port]
  context:
  - ConditionEnv
  description: |+
    Create a trigger condition on port port. Block mblk shall
    contain code to perform the matching of input. When the
    trigger condition is true (matched) then the enclosing alt
    will execute block ablk to perform variable assignment.

trigger1:
  opcode: 329
  operations: []
  context:
  - ConditionEnv
  description: ""

"true":
  opcode: 41
  operations:
  - post: [lit]
  context:
  - Block
  description: |+
    Push a special true literal onto the stack.

type:
  opcode: 166
  operations:
  - pre: [obj, name]
  context:
  - DefineEnv
  description: |+
    Associate a type object and name into a type definition object
    and then attach this to the owning module or group definition.

typew:
  opcode: 167
  operations:
  - pre: [ablk, obj, name]
  context:
  - DefineEnv
  description: |+
    Associate a type object and name into a type definition object
    and then attach this to the owning module or group definition.
    Attributes from block ablk are attached.

union:
  opcode: 255
  operations:
  - pre: [fblk]
    post: [obj]
  context:
  - Block
  description: |+
    Construct a union object from field definitions in block fblk
    and push on to the stack.

unmap:
  opcode: 269
  operations:
  - pre: [p1, p2]
  context:
  - BehavEnv
  description: |+
    Break the mapping between port p1 and port p2.

unmapa:
  opcode: 270
  operations:
  - pre: [comp]
  context:
  - BehavEnv
  description: |+
    Break all mappings from component comp.

unmapaa:
  opcode: 271
  operations: []
  context:
  - BehavEnv
  description: |+
    Break all mappings on all components.

unmapfromto:
  opcode: 253
  operations:
  - pre: [mapval, key]
  context:
  - BehavEnv
  description: |+
    remove key from mapval.

utf8:
  opcode: 16
  operations:
  - post: [lit]
  context:
  - Block
  description: |+
    Push a string literal onto the stack. This is a
    variable-length instruction with the details of the literal
    string following the instruction itself: first, a length
    field, then the bytes of the string, encoded UTF-8.

    The length field is encoded with the same byte order as has
    been selected for instructions. The string itself is always
    encoded with the first byte of the string at the lowest file
    offset – the natural ordering for strings.

    Padding shall be placed at the end of the string bytes to
    restore the correct alignment for following instructions.

val2str:
  opcode: 430
  operations: []
  context:
  - PredefinedFunctionInterpreter
  description: ""

value:
  opcode: 380
  operations:
  - post: [obj]
  context:
  - AListEnv
  description: |+
    Fetch the value of the current communication operation.

    For receive and trigger operations this is the current
    message.

    For getreply this is the return value of the current
    procedure.

    For catch this is the exception of the current procedure.

valueof:
  opcode: 259
  operations:
  - pre: [tmpl]
    post: [value]
  context:
  - Block
  description: |+
    Check template tmpl. If it has a single value then return this
    on the stack otherwise raise a runtime error.

var:
  opcode: 112
  operations:
  - pre: [type, name]
  context:
  - AltstepEnv
  - BehavEnv
  - FixupEnv
  - InitEnv
  description: |+
    Create a variable with the given type and name. Bind this
    variable to the current function (control, altstep, testcase.)

vardup:
  opcode: 111
  operations: []
  context:
  - AltstepEnv
  - BehavEnv
  - FixupEnv
  - InitEnv
  description: ""

variant:
  opcode: 204
  operations:
  - pre: [val]
  description: |+
    Attach the variant attribute val to the object owning the
    current block.

varianto:
  opcode: 206
  operations:
  - pre: [val]
  description: |+
    Attach the overriding variant attribute val to the object
    owning the current block.

verdicttype:
  opcode: 232
  operations:
  - post: [obj]
  context:
  - Block
  description: |+
    Push the built-in verdicttype type object.

version:
  opcode: 3
  operations:
  - pre: [num]
  context:
  - LoadEnv
  description: |+
    Specify the version number of t3xf to which this file
    conforms. Version numbers start from one.

vlist:
  opcode: 7
  operations:
  - pre: [mark, object1, .., objectn]
    post: [vlist]
  context:
  - Block
  description: |+
    Build a value list from a marked listed of objects,
    potentially empty. The objects and the mark are removed from
    the stack and replaced with a value list object.

wait:
  opcode: 309
  operations: []
  context:
  - BehavEnv
  description: ""

while:
  opcode: 53
  operations:
  - pre: [cond, body]
  context:
  - Block
  description: |+
    Implements the TTCN-3 while statement using two block
    arguments.

    Block cond is evaluated to test the loop condition. If the
    block yields a true value then block body is executed before
    looping to evaluate the condition again.

    Execution terminates when the loop condition returns a false
    value.

xor:
  opcode: 75
  operations:
  - pre: [a, b]
    post: [res]
  context:
  - Block
  description: |+
    With boolean inputs, perform the logical exclusive or
    operation and return the boolean result.

    With bitstring, hexstring or octetstring inputs perform the
    bitwise exclusive or operation and return the result. The
    result type will be of the same base type as the inputs.
